#include <iostream>
#include <string>
#include <bits/stdc++.h>

#include <opencv2\highgui\highgui.hpp>
#include <opencv2\opencv.hpp>
#include <opencv2/calib3d.hpp>

#include <ImgProcessFuncs.h>

int main() {
    // Create a matrix object and load the image to the matrix
    Mat original = imread(argv[1], IMREAD_COLOR);

    // Check if image is not empty
    if (original.empty()){
        cout << "Couldn't load the image." << endl;
        system("pause");
        return-1;
    }

    // Convert the image to grayscale
    Mat gray = grayscale(original);

    // Stretch the image's histogram
    histogramStretch(gray);

    // Blur the image
    Mat blurred = gausBlur(gray, 1, 1.5);

    // Mat result = calculateGradients(blurred);

    // Get corner features of the image
    vector<Point> corners = harrisCorners(blurred, 4, 0.04, 86);

    // Draw a circle at a corner position
    for (auto i : corners){
        //circle(original, i, 4, Scalar(0, 255, 0), 1);
        rectangle(original, Point(i.x + 4.0, i.y + 4.0), Point(i.x - 3.0, i.y - 3.0), Scalar(255, 255, 0), 2);
    }

    // Create a window with a specified name
    namedWindow("Target");

    // Display the image
    imshow("Target", original);
    waitKey(0);

    return 0;
}
